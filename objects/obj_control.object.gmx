<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //pause start
if (keyboard_check_pressed(vk_escape) &amp;&amp; (global.pause = false &amp;&amp; keyboard = false)) { //pause
    global.pause = true;
    //do pause stuff
} else if (keyboard_check_pressed(vk_escape) &amp;&amp; (global.pause = true || keyboard)) {
    global.pause = false;
    str = "";
    keyboard = false;
    //do unpause stuff
}
    //pause end

if global.pause = false {
        //back control start
    
    background_blend[0] = make_color_hsv(150, 255, val);
    if val &gt; 10 val -= 1 / room_speed * global.gamespeed;
        
        //set view + shaking mechanism
    if global.explosion {
        view_xview[0] = 12 + random_range(-12,12);
        view_yview[0] = 12 + random_range(-12,12);
    } else {
        view_xview[0] = 12;
        view_yview[0] = 12;
    }
        //back control end
    
        //set bullet hit damage
    for(i = 0; i &lt; global.bullets; i += 1) {
        if (global.bullet[i,2] == -1) continue;
        inst = collision_point( global.bullet[i,3], global.bullet[i,4], object[global.bullet[i,2]], false, true);
        if inst {
            with inst{
                live -= 1;
                rotate = global.bullet[obj_control.i,5];
            }
            global.bullet[i,2] = -1;
        }
    }
    if round(random(2 * room_speed / global.gamespeed)) == 0 instance_create( random(room_width),0,obj_enemy_standard);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if ((keyboard_check_pressed(ord("T")) || keyboard_check_pressed(vk_enter) || keyboard_lastchar == "/")) &amp;&amp; global.pause == false &amp;&amp; keyboard = false {
    CycleOldDigits = false;
    if global.pause = false { 
        if pauseCommand global.pause = true;
        keyboard = true;
        keyboard_string = 0;
        if (keyboard_lastchar == "/") keyboard_string += "/"
    }
} else if keyboard_check_pressed(vk_enter) &amp;&amp; (global.pause == false || pauseCommand) {
    global.pause = false;
    keyboard = false;
} //activates user input

    //cheats + messages
if keyboard == true {
    if string_length(keyboard_string) &gt; 128 {
       keyboard_string = string_copy(keyboard_string, 1, 128);
    }
    if string(keyboard_string) != old_typo &amp;&amp; messages != 0 &amp;&amp; CycleOldDigits {
        CycleOldDigits = false;
        keyboard_string = global.massage[cycleDigits] + keyboard_string;
    } else old_typo = string(keyboard_string);
    if CycleOldDigits str = global.massage[cycleDigits] else str = string(keyboard_string);
    if keyboard_check_pressed(vk_up) &amp;&amp;  messages != 0 {
        if CycleOldDigits == false {
            cycleDigits = messages - 1;
            keyboard_string = "";
        }
        if (CycleOldDigits == true &amp;&amp; cycleDigits &gt; 0) cycleDigits -= 1;
        CycleOldDigits = true;
    } else if (messages != 0 &amp;&amp; cycleDigits &lt; (messages - 1) &amp;&amp; CycleOldDigits == true &amp;&amp; keyboard_check_pressed(vk_down)) cycleDigits += 1
    
        alarmKey -= 1;
    if alarmKey &lt;= -1 {
        if slash == "" slash = "|" else slash = "";
        alarmKey = 0.6 * room_speed;
        //this makes the "|" in user input do "doot doot"!
    }
} else if keyboard == false &amp;&amp; str != "" &amp;&amp; keyboard_check_pressed(vk_enter) {
    global.massage[messages] = str;
    if string_char_at(str,0) == "/"
        scr_cheats(str,cheats,strCheat,pauseCommand,messages);
    message[messages,0] = str;
    message[messages,1] = 10 * room_speed; //time for messages to begin fade away
    message[messages,2] = 1; //alpha
    str = "";
    messages += 1
    if global.gamespeed == 0 global.gamespeed = -0.000000001;
} else if !(cheats) {
    obj_ship.SuperFast = false;
    obj_ship.RandAngl = false;
    pauseCommand = false;
    obj_ship.GodMode = false;
    str = "";
}
    //end cheats + messages
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rotate = 0;
old_typo = "";
cycleDigits = 0;

    //enable view
if !view_enabled
   {
   view_visible[0] = true;
   view_enabled = true;
}

    //set view
view_hport[0] = room_height - 24;
view_wport[0] = room_width - 24;
view_hview[0] = room_height - 24;
view_wview[0] = room_width - 24;

    //set background hue
val = 255;

global.explosions = 0;
global.explosion = false;
global.rand_x = 0;
global.rand_y = 0;
global.bullets = 0;
global.pause = false;
global.gamespeed = 1;

BulletType[1] = spr_bullet;
object[1] = obj_enemy_parent;
BulletType[2] = spr_bullet_enemy;
object[2] = obj_ship;

    //set typing
str = "";
strCheat = "/- Cheats need to be activated"
keyboard = false;
cheats = false;
messages = 0;
alarmKey = 0.5 * room_speed * global.gamespeed;
slash = "";
pauseCommand = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Bullets</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //this draws bullets
for(i = 0; i &lt; global.bullets; i += 1) {
    if (global.bullet[i,3] &lt; 0 || global.bullet[i,3] &gt; room_width || global.bullet[i,4] &lt; 0 || global.bullet[i,4] &gt; room_height || global.bullet[i,2] == -1) { 
        global.bullet[i,2] = -1;
        continue;
    } else draw_sprite_ext(BulletType[global.bullet[i,2]], 0, global.bullet[i,3], global.bullet[i,4], 1, 1, global.bullet[i,5],c_white ,1);
    if global.pause = true continue;
    global.bullet[i,3] += global.bullet[i,0] / room_speed * global.gamespeed;
    global.bullet[i,4] -= global.bullet[i,1] / room_speed * global.gamespeed;
    
}
    //this deletes every bullet with ID -1
for (i = 0; i &lt; global.bullets; i += 1){
    if global.bullet[i,2] == -1 {
        for (var s = 0; s &lt; 6; s += 1)
        global.bullet[i,s] = global.bullet[global.bullets - 1,s];
        global.bullets -= 1;
    }
}
/*
    Out of bounce bullets and bullet who have hit their target get ID -1
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//draw typing

if keyboard == true draw_text_colour(16,room_height - 32,str + slash,c_white,c_white,c_white,c_white,1);

for(i = 0; i &lt; messages; i += 1){
    if message[i,2] &lt; 0 continue;
    if string_char_at(message[i,0],0) == "/" a = c_red else a = c_white;
    draw_text_transformed_color(16, room_height - 64 - (messages - i) * 16, message[i,0],1, 1,0,a,a,a,a,message[i,2]);
    if message[i,1] &lt;= -1 message[i,2] -= 0.25 / room_speed * global.gamespeed;
    if !(keyboard) message[i,1] -= 1;
}

posT = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>triangles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_alpha(0.7);
rotate += 3
xx = obj_ship.x;
yy = obj_ship.y;
xx1 = xx + 1200 * cos((rotate + 22) * pi / 180);
yy1 = yy + 1200 * sin((rotate + 22) * pi / 180);
xx2 = xx + 1200 * cos((rotate - 22) * pi / 180);
yy2 = yy + 1200 * sin((rotate - 22) * pi / 180);
draw_triangle_colour(xx,yy,xx1,yy1,xx2,yy2,c_blue,c_blue,c_blue,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
