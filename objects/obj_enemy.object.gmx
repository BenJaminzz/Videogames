<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 300;
directDefault = -90;
direct = directDefault;
range = 70;
p = random(360);
spdTurn = 50;
live = 2;
liveSave = live;
image_speed = 0;
rotate = 99999;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direct;
if global.pause == false {
    direct = directDefault + range * cos(p * pi / 180); //this controls cosinus movement ai
    p += spdTurn / room_speed * global.gamespeed;
    x += spd * cos(direct * pi / 180) / room_speed * global.gamespeed;
    y -= spd * sin(direct * pi / 180) / room_speed * global.gamespeed;
    if !(live == liveSave) image_index = 1; //hurt
    if !(image_index &lt; 1) {
        image_index += 32 / room_speed * global.gamespeed; //hurt
        x += 200 * cos(rotate * pi / 180) / room_speed * global.gamespeed;
        y -= 200 * sin(rotate * pi / 180) / room_speed * global.gamespeed;
    }
    liveSave = live //hurt
    if collision_circle(x,y,16,obj_ship,false,true) live = 0;
}

if y &gt; room_height y = 0;
if x &lt; 0 x = room_width;
if x &gt; room_width x = 0;
if y &lt; 0 y = room_width;

if live &lt;= 0 {
    if rotate != 99999
        scr_explosion(6,rotate,3,x,y,150,40 / room_speed,5);
    else {
        rotate = obj_ship.direct;
        scr_explosion(16,rotate,10,x,y,300,40 / room_speed,5);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
