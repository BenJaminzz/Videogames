<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 300;
directDefault = -90;
direct = directDefault;
range = 20;
p = random(360);
spdTurn = 120;
live = 5;
liveSave = live;
image_speed = 0;
rotate = 0;

alarmNShoot = -1;

BulletSpd = 1000;
dis = random_range(100,300);
if round(random(1)) == 0 dirr = 90 else dirr = -90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vast, posx, posy;
SetalarmNShoot = 0.2 * room_speed;

//if global.gamespeed != global.speedgain alarmNShoot = 0.2 * room_speed / global.gamespeed;

if global.pause == false {

    
    distance = point_distance(x, y, mouse_x, mouse_y);
    
    pd = point_direction(x, y, obj_ship.x, obj_ship.y);
    dd = angle_difference(image_angle, pd);
    image_angle -= min(abs(dd), 90 / room_speed * global.gamespeed) * sign(dd);
    spd = power(dis,0.6) - power(distance,0.6) / 10;
    
    if round(random(2 * room_speed / global.gamespeed)) == 120 dirr = 90 else if round(random(room_speed / global.gamespeed)) == 0 dirr = -90
    x += ((distance - dis) * cos(image_angle * pi / 180) + spd * cos((image_angle + dirr) * pi / 180)) / room_speed * global.gamespeed ;
    y -= ((distance - dis) * sin(image_angle * pi / 180) + spd * sin((image_angle + dirr) * pi / 180)) / room_speed * global.gamespeed ;
    if !(live == liveSave) image_index = 1; //hurt

    if !(image_index &lt; 1) {
        image_index += 32 / room_speed * global.gamespeed; //hurt
        x += 100 * cos(rotate * pi / 180) / room_speed * global.gamespeed;
        y -= 100 * sin(rotate * pi / 180) / room_speed * global.gamespeed;
    }
    liveSave = live //hurt
    alarmNShoot -= 1 * global.gamespeed;
    if alarmNShoot &lt;= -1 &amp;&amp; collision_rectangle( x, y, x + 1000 * cos(image_angle * pi / 180), y - 1000 * sin(image_angle * pi / 180), obj_ship, false, false) { //shoots normal bullets
        direct += random_range(-5,5);
        alarmNShoot = SetalarmNShoot;
        if round(random(1)) == 0 vast = image_angle + 90 else vast = image_angle - 90;
        posx = x + 12 * cos((vast) * pi / 180);
        posy = y + 12 * sin((vast) * pi / 180);
        scr_shoot_bullet(image_angle,BulletSpd,2,posx,posy);
    }
}

if y &gt; room_height {
    y = 0;
    x = random(room_width)
}

if live &lt;= 0 {
    scr_explosion(5,rotate,20,x,y,150,50 / room_speed,5);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
